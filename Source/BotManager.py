from telebot.types import InputMediaPhoto, InputMediaVideo
from dublib.Methods import ReadJSON, WriteJSON
from dublib.WebRequestor import WebRequestor
from dublib.Polyglot import Markdown, HTML
from telebot import TeleBot

import random
import os

# –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–∞.
class BotManager:
	
	# –°—Ç—Ä–æ–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ.
	def __BuildCaption(self, Post: dict) -> str:
		# –¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏.
		Caption = str()
		# –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π.
		Sections = ["artists", "characters", "fandoms", "tags"]
		# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏.
		Emoji = {
			"artists": "üñåÔ∏è",
			"characters": "üë•",
			"fandoms": "üí•",
			"tags": "\nüîó"
		}
		
		# –î–ª—è –∫–∞–∂–¥–æ–π —Å–µ–∫—Ü–∏–∏.
		for Section in Sections:
			
			# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∏.
			if len(Post[Section]) > 0:
				# –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏.
				SectionName = self.__Settings["sections-names"][Section]
				
				# –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π
				if len(Post[Section]) > 1:
					# –ó–∞–ø–∏—Å—å –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ.
					SectionName = SectionName.replace("|", "")
					
				else:
					# –ó–∞–ø–∏—Å—å –≤ –æ–¥–∏–Ω–æ—á–Ω–æ–º —á–∏—Å–ª–µ.
					SectionName = SectionName.split("|")[0]
					
				# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ–∫—Ü–∏–∏.
				Caption += Emoji[Section] + " " + SectionName + "\: "
			
				# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞.
				for Segment in Post[Section]:
					# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞.
					Segment = HTML(Segment).plain_text
					Segment = Segment.replace(" ", "_")
					Segment = Segment.replace("(", "")
					Segment = Segment.replace(")", "")
					Segment = Segment.replace("'", "")
					Segment = Segment.replace("-", "_")
					Segment = Segment.replace(":", "")
					Segment = Segment.replace("/", "")
					Segment = Segment.replace("\\", "")
					Segment = Segment.replace(".", "_")
					Segment = Segment.replace("<", "")
					Segment = Segment.replace(">", "")
					Segment = Segment.replace("=", "_")
					# –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ, –≤–ª–∞–∑–∏—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –ø—É—Å—Ç–æ–π, –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
					if Segment.isdigit() == False and len(Caption) < 1008 and Segment.strip(" _") != "": Caption += "\#" + Markdown(Segment).escaped_text + ", "
				
				# –û—á–∏—Å—Ç–∫–∞ –∫—Ä–∞–µ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤.
				Caption = Caption.strip(", ")
				# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
				Caption += "\n"
			
		# –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫, –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
		if Post["source"] != None: Caption += "\n¬©Ô∏è [" + self.__Settings["sections-names"]["source"] + "](" + Post["source"] + ")"
		
		return Caption
			
	# –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª.
	def __DownloadFile(self, URL: str, Type: str):
		# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞.
		if os.path.exists(f"Temp/File.{Type}"): os.remove(f"Temp/File.{Type}")
		# –ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞.
		Response = self.__Requestor.get(URL)
		
		# –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω.
		if Response.status_code == 200:
			# –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞.
			with open(f"Temp/File.{Type}", "wb") as FileWriter: FileWriter.write(Response.content)
	
	# –ü–æ–º–µ—á–∞–µ—Ç –ø–æ—Å—Ç.
	def __MarkAs(self, PostID: int, Mark: str):
		# –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—Ç–µ.
		del self.__Posts["unsended"][str(PostID)]
		# –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–æ–∫.
		self.__Posts[Mark].append(PostID)
		# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.
		self.__Posts["unsended-count"] = len(self.__Posts["unsended"].keys())
		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.
		WriteJSON("Data/Posts.json", self.__Posts)
		
	# –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä. 
	def __init__(self, settings: dict):
		
		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤.
		#==========================================================================================#
		# –û–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤.
		self.__Posts = ReadJSON("Data/Posts.json")
		# –ì–ª–æ–∞–±–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
		self.__Settings = settings.copy()
		# –ó–∞–ø—Ä–æ—Å—á–∏–∫.
		self.__Requestor = WebRequestor()
		# –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
		self.__Bot = TeleBot(settings["token"])
		# –¢–∏–ø—ã –≤–ª–æ–∂–µ–Ω–∏–π.
		self.__Types = {
			"jpg": InputMediaPhoto,
			"mp4": InputMediaVideo
		}
		
		# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å—á–∏–∫–∞.
		self.__Requestor.initialize()
		
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç.
	def send(self):
		
		# –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
		if len(self.__Posts["unsended"].keys()) > 0 and os.path.exists("Data/blocked") == False:
				
			try:
				# ID –ø–æ—Å—Ç–∞.
				PostID = random.choice(list(self.__Posts["unsended"].keys())) if self.__Settings["random"] == True else list(self.__Posts["unsended"].keys())[0]
				# –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞.
				Post = self.__Posts["unsended"][PostID]
				# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.
				self.__DownloadFile(Post["url"], Post["type"])
				# –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤.
				MediaGroup = list()
				# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è.
				Caption = self.__BuildCaption(Post)
			
				# –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–µ–Ω—å—à–µ 20 MB.
				if os.path.getsize("Temp/File." + Post["type"]) < 20971520:
					# –ë—É—Ñ–µ—Ä.
					Bufer = self.__Types[Post["type"]](
						media = open("Temp/File." + Post["type"], "rb"),
						caption = Caption,
						parse_mode = "MarkdownV2"
					)
					# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫.
					MediaGroup.append(Bufer)

					# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
					self.__Bot.send_media_group(
						chat_id = self.__Settings["target"],
						media = MediaGroup
					)
					# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö.
					self.__MarkAs(int(PostID), "sended")
				
				else:
					# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–∑–≤–∞–≤—à–∏—Ö –æ—à–∏–±–∫—É.
					self.__MarkAs(int(PostID), "errors")
					
			except Exception as ExceptionData:
				# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Å—Ç—Ä–æ–∫–µ.
				ExceptionData = str(ExceptionData)
				# –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.
				if "PHOTO_INVALID_DIMENSIONS" in ExceptionData: self.__MarkAs(int(PostID), "errors")
				# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
				print(ExceptionData)